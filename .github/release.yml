name: Manual Release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-pc-windows-msvc]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build project
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}-binary
          path: target/${{ matrix.target }}/release/

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get the version from Cargo.toml
        id: cargo-version
        run: echo "::set-output name=version::$(grep -m 1 '^version = ' Cargo.toml | sed 's/version = \"\(.*\)\"/\1/')"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.cargo-version.outputs.version }}
          release_name: Release ${{ steps.cargo-version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            # Changelog
            $(cat CHANGELOG.md)

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.target }}-binary
          path: ./binaries

      - name: Upload assets to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./binaries
          asset_name: ${{ matrix.target }}-binary
          asset_content_type: application/octet-stream
